1. Технические требования к верстке:

    + Нужно сделать верстку только под широкоформатные мониторы, с шириной экрана более 1200 пикселей или более. Максимальная ширина контейнера с контентом - 1160 пикселей (кроме второго блока с квадратами)
    + Бекграунд изображение в хедере должно занимать всю доступную ширину экрана
    + Адаптивная верстка под разные разрешения экрана НЕ требуется
    + Все стили должны быть написаны в файлах SCSS
    + Все классы на странице должны быть заданы с использованием методологии BEM


2. Динамические элементы на странице:

    + Вкладки в секции Our services должны переключаться при нажатии мышью. Текст и картинки для других вкладок вставить любые
    + Карусель на вкладке What people say about theHam должна быть рабочей, по клику как на иконку фотографии внизу, так и на стрелки вправо-влево. Карусель обязательно должна быть с анимацией
    + Для подключения динамических элементов можно использовать любые библиотеки - как jQuery/его плагины, так и чистый Javascript код


3. Сборка проекта:
    + Проект должен собираться с помощью сборщика Gulp
    + В корне проекта должно быть две папки - src и dist, а также файл index.html
    + Стили и скрипт в index.html должны быть подключены из папки dist
    + Папка src должна содержать все рабочие файлы, в которых вы будете писать код (папки scss, js, img)
    + Содержимое папки dist должно генерироваться автоматически путем преобразования и копирования файлов, которые находятся в папке src

    + Необходимо настроить два основных рабочих задания для Gulp:
        dev
        build


4. Рабочее задание build должно включать следующие подзадания:

    + очистка папки dist
    + компиляция scss файлов в css
    + конкатенация js и css файлов в один
    + минификация итоговых js и css файлов
    + копирование минифицированных js и css файлов в папку dist
    + оптимизация картинок и копирование их в папку dist



5. Рабочее задание dev должно включать следующие подзадания:

    + Запуск сервера и последующее отслеживание изменений *.js и *.scss файлов в папке src
    + При изменении - пересборка и копирование объединенного и минифицированного файла styles.min.css или script.min.js в папку dist
    + При сборке проекта можно использовать любые npm пакеты, но большинство нужного функционала вы найдете в следующих:

        - gulp
        - gulp-sass
        - browser-sync
        - gulp-js-minify
        - gulp-clean-css
        - gulp-clean
        - gulp-concat
        - gulp-imagemin

6. Не обязательные задания продвинутой сложности:


   + Подключить также плагин, который в dev режиме будет выполнять автоматическую перезагрузку страницы браузера после каких-либо изменений в исходных файлах
   - Настроить обработку ошибок, чтобы при ошибках в любой из задач (например, ошибка компиляции scss в css) процесс не завершался, а ошибка выводилась в консоль и на экран браузера
   + Добавить на страницу в произвольном месте еще один блок с картинками, расположить их внутри блока с помощью плагина Masonry
   - При клике на иконку поиска в хедере, показывать инпут для поиска. При вводе в него слова по нажатию Enter - отправлять Ajax запрос на любой беслаптный сервис с картинками, доставать оттуда картинки по указанному ключевому слову, и заменять те, что были внутри блока с Masonry, на найденные
   - Сделать аналогичную сборку также на Webpack

